const { build } = require('fastify-cli/helper');

const { generateSaltNonce } = require('./utils');

describe('Transactions features:', () => {
  const url = '/transactions';
  let app;

  beforeAll(async () => {
    app = await build('src');
  });

  describe(`POST - ${url} (Transaction funding)`, () => {
    it('Should fund a transaction', () =>
      app
        .inject({
          url,
          method: 'POST',
          payload: {
            nonce: generateSaltNonce(),
            target: '0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0',
            data: '0x6a761202000000000000000000000000cfeb869f69431e42cdb54a4f4f105c19c080ac000000000000000000000000000000000000000000000000000000000000000449951d62f00000000000000000000000090f8bf6a479f320ead074411a4b0e7944ea8c9c1000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041eb667a968b979d8406df46c7fedbc2cd6e9046a10f379baa27ddecf560b233261aba9bdc6aa8f391e45156bdac5165f12b1c1ceae2729353ebf12810302dacbc1c00000000000000000000000000000000000000000000000000000000000000',
          },
        })
        .then((response) => {
          expect(response.statusCode).toBe(200);
          expect(typeof response.json().taskId).toBe('string');
        }));

    it('Should Fund several transactions', () => {
      const numberOfTxs = 3;

      return Promise.all(
        Array.from(Array(numberOfTxs).keys()).map(() =>
          app.inject({
            url,
            method: 'POST',
            payload: {
              nonce: generateSaltNonce(),
              target: '0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0',
              data: '0x6a761202000000000000000000000000cfeb869f69431e42cdb54a4f4f105c19c080ac000000000000000000000000000000000000000000000000000000000000000449951d62f00000000000000000000000090f8bf6a479f320ead074411a4b0e7944ea8c9c1000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041eb667a968b979d8406df46c7fedbc2cd6e9046a10f379baa27ddecf560b233261aba9bdc6aa8f391e45156bdac5165f12b1c1ceae2729353ebf12810302dacbc1c00000000000000000000000000000000000000000000000000000000000000',
            },
          }),
        ),
      ).then((responses) => {
        expect(responses.length).toBe(numberOfTxs);
        responses.forEach((response) => {
          expect(response.statusCode).toBe(200);
          expect(typeof response.json().taskId).toBe('string');
        });
      });
    });

    it('Should fail on incorrect transaction', () =>
      app
        .inject({
          url,
          method: 'POST',
        })
        .then((response) => {
          expect(response.statusCode).toBe(500);
        }));
  });
});
